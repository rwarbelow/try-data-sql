1:
  title: What is SQL? 
  text: >
    SQL stands for <span class="vocab">Structured Query Language</span>. It's the computer language we use to parse through large sets of raw data and find answers to data questions. Instead of asking in human language "How many books did Stephen King have that won a Goodreads award in 2020?" and sorting through all of the data, we can write SQL code to ask a computer to do that work for us.<br><br>You might be familar with the concept of a spreadsheet (for example, <a href="https://docs.google.com/spreadsheets/d/1R-wpkPK0cWo7Au2HdgEr4ig9kOwtPz4usXoTZqM4Z3A/edit?usp=sharing" target="blank">Google Sheets</a> or Microsoft Excel). This is one way to store data, and any ".csv" file can be opened using spreadsheet software. You can also store data in a database, which is generally the use case for SQL.<br><br>We can write SQL statements to answer questions such as:<ol><li>What books got more than 1000 votes?</li><li>What was the average rating for all books in the year 2015?</li><li>What authors have an average book rating of 4.5 or above?</li><li>Tell me the titles of all books with more than 600 pages</li></ol>
  images: 
    - spreadsheet_screenshot.png
2:
  title: Exploring Datasets
  text: >
    We looked at the first 20 rows of the Goodreads Awards dataset in the screenshot of the last lesson. Let's look a little more deeply into the datasets we'll be using in this class. All of these datasets (and thousands more!) are hosted on <a href="https://www.kaggle.com">kaggle.com</a>, an online community for data analysts, data scientists, and more.<br><h4>Dataset Links</h4><a href="https://www.kaggle.com/somnambwl/book-awards" target="blank">goodreads</a><br><a href="https://www.kaggle.com/residentmario/ramen-ratings" target="blank">ramen</a><br><a href="https://www.kaggle.com/jsphyg/tipping" target="blank">tips</a><br><a href="https://www.kaggle.com/dhruvildave/google-trends-dataset" target="blank">trends</a><br><a href="https://www.kaggle.com/c/titanic" target="blank">titanic</a><br><br>As you look through these datasets, ask yourself: <ol><li>What kinds of questions might I be able to answer with this data?</li><li>What trends might we find?</li><li>What might be interesting about this data?</li><li>What specific pieces of information do I get from this dataset?</li></ol><p>Type into the chat one or more answer to the above questions. For example: "By looking at the ramen dataset, we might be able find out which style of ramen has the highest average star rating."<br><br><b>NOTE:</b> In these SQL lessons, not all columns will be available. In the next lesson, you'll learn a quick trick to figure out what columns are included.
3: 
  title: Select All Columns From a Dataset
  text: >
    Let's start by writing an SQL statement that will return every row and every column of a specific dataset (we'll interchangeably refer to dataset also as "table").<br><br>Assuming that a table of data exists, we can use this statement: <span class="vocab">SELECT * FROM table_name;</span><br><br>
    The <span class="vocab">*</span> represents all columns, which means you'll see all of the pieces of data for the entire dataset. It is traditional to capitalize words like SELECT and FROM, but you'll get the same result if they are lowercase (and the industry is moving away from that convention). <br><br> Let's try the example below in the console. After you finish typing, hit the ENTER key
    and your results will appear in tabular format below the console.
  examples:
    - SELECT * FROM goodreads;
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. You can click each situation to toggle the answer.  
  tasks:
    - question: Return all data from the trends table.
      answer: SELECT * FROM trends;
    - question: Return all data from the tips table.
      answer: SELECT * FROM tips;
    - question: Return all data from the ramen table.
      answer: SELECT * FROM ramen;
    - question: Return all data from the titanic table.
      answer: SELECT * FROM titanic;
4:
  title: Select Specific Columns
  text: >
    Now that you know how to select all of the data from a table, let's learn how to limit the results to
    certain columns. We can do this using the following syntax: <span class="vocab">SELECT column_name FROM
    table_name;</span> and <span class="vocab">SELECT column_name_one, column_name_two FROM
    table_name;</span>where column_name represents the column(s) we want to get back.
  examples:
    - SELECT location FROM trends;
    - SELECT name, age FROM titanic;
    - SELECT authors, title FROM goodreads;
    - SELECT location, year, query FROM trends;
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. Remember, if you don't know the exact name of the column you need, you can use <b class="code">SELECT * FROM table_name</b> to see all available columns. 
  tasks:
    - question: "Return the class and fare from the titanic table."
      answer: "SELECT class, fare FROM titanic;"
    - question: Return only the authors of the goodreads table.
      answer: SELECT authors FROM goodreads;
    - question: Return only the total bill amount from the tips table.
      answer: SELECT total_bill FROM tips;
    - question: "Return the brand, country, and stars from the ramen table."
      answer: "SELECT brand, country, stars FROM ramen;"
5:
  title: Filtering Results
  text: >
    Everything we've learned so far will show every row of data (just in different ways). What happens if we only want specific pieces of data, like all of the tips just for one day of the week?<br><br>We can do that using WHERE: <span class="vocab">SELECT * FROM table_name WHERE column = value;</span><br><br>If you want to filter by two or more columns, you'll add the word AND: <span class="vocab">SELECT * FROM table_name WHERE column = value AND column = value;</span><br><br>To filter to either of two conditions, use the word OR: <span class="vocab">SELECT * FROM table_name WHERE column = value OR column = value;</span><br><br>Notice that for numerical data, we can simply write the number. For alphabet data (which we call strings), we need to use quotation marks. It is conventional to use single quote marks (also known as the apostrophe).
  examples:
    - SELECT * FROM goodreads WHERE year >= 2018;
    - SELECT * FROM titanic WHERE sex = 'male';
    - SELECT authors, title FROM goodreads WHERE category = 'Fiction' AND year = 2019;
    - SELECT * from goodreads WHERE category = 'Fiction' OR category = 'Horror';
  tasks:
    - question: Show the data for all female titanic passengers who are 18 or older.
      answer: SELECT * FROM titanic WHERE sex = 'female' AND age >= 18;
    - question: Display the queries and ranks for the trends in 2009.
      answer: SELECT query, rank FROM trends WHERE year = 2009;
    - question: Show all of the tip data from Saturday and Sunday.
      answer: SELECT * FROM tips WHERE day = "Sat" OR day = "Sun";
    - question: Show all of the ramen brands, varieties, and star ratings for entries rated 4.5 or higher.
      answer: >
        SELECT brand, variety, stars FROM ramen WHERE stars >= 4.5;<br><br>
        <span class="vocab">Spicy challenge</span>: Sort these results so that the entries with the most number of stars are at the top.
6:
  title: Ordering Results
  text: >
    The data isn't easy to look at right now given that it's not ordered in any specific way. We can add to our SQL statement to display the data in a specific order. We can do that by appending "order by" to our query: <span class="vocab">SELECT first_column_name, second_column_name FROM table_name ORDER BY second_column_name;</span>. <br><br>By default, ordering is done ascending. This means that alphabetical results will be sorted A - Z (and non-alphabet characters after that), and numerical results will be sorted starting at 0 and counting up. If you want to reverse the order, append the word <span class="vocab">DESC</span> to the end of your order by.
  examples:
    - SELECT authors, title FROM goodreads ORDER BY authors;
    - SELECT authors, title FROM goodreads ORDER BY authors DESC;
  tasks:
    - question: Show the name, fare, and port embarked for the titanic table and order it port. 
      answer: SELECT name, fare, embarked FROM titanic ORDER BY embarked;
    - question: Show the variety, country, and stars for the ramen table and order it by highest star rating. 
      answer: SELECT variety, country, stars FROM ramen ORDER BY 3 DESC;
    - question: Show the year, rank, and query from the trends table ordered by the rank;
      answer: SELECT year, rank, query FROM trends ORDER BY rank;
    - question: Show the tip and total bill amount ordered by highest total bill;
      answer: SELECT tip, total_bill FROM tips ORDER BY total_bill DESC;
7:
  title: Ordering Results By Multiple Columns
  text: >
    You may have noticed that the rest of the data that is specified by the ordered column seems kind of... random. You can change that by adding more things to order by in your query: <span class="vocab">SELECT first_column_name, second_column_name FROM table_name ORDER BY second_column_name, first_column_name;</span>. <br><br>The order matters here. First, it will order everything by whatever appears right after "ORDER BY". Then, it will sort the results within that grouping by the second column you specify.
  examples:
    - SELECT * FROM titanic WHERE sex = 'female' ORDER BY survived, age;
    - "SELECT authors, title FROM goodreads ORDER BY authors, title;"
    - "SELECT location, year, query FROM trends ORDER BY year DESC, query;"
  tasks:
    - question: Show the name, fare, and port embarked for the titanic table and order it port, then alphabetical name. 
      answer: SELECT name, fare, embarked FROM titanic ORDER BY embarked, name;
    - question: Show the variety, country, and stars for the ramen table and order it by highest star rating, then variety. 
      answer: SELECT variety, country, stars FROM ramen ORDER BY 3 DESC, 1;
    - question: Show the year, rank, and query from the trends table ordered by the rank, then year;
      answer: SELECT year, rank, query FROM trends ORDER BY rank, year;
8:
  title: Aliasing Column Names
  text: >
    Right now, our results appear with whatever default column labels they came with (for example, "total_bill" or "query"). What if we wanted to label those "total" or "search_term" instead? We can do that with an alias: <span class="vocab">SELECT first_column_name AS my_first_title, second_column_name AS my_second_title FROM table_name;</span>. 
  examples:
    - "SELECT location, query AS search_term, year FROM trends;"
  tasks:
    - question: Print out the brand, variety, and stars for the ramen data, but change the name of "brand" to "company"
      answer: SELECT brand AS company, variety, stars FROM ramen;
    - question: Print out the category, title, authors, and vote count for the goodreads data, but change the name of "votes" to "total_vote_count"
      answer: SELECT category, title, authors, votes AS total_vote_count FROM goodreads;
    - question: Some of the titanic data set's columns don't have very good names. Select all of the data from the titanic data set, but make the column names more human-friendly. 
      answer: SELECT id, survived, pclass AS class, name, sex, age, sibsp AS sibling_and_spouse_count, parch AS parent_count, ticket AS ticket_number, fare, cabin AS cabin_number, embarked AS port_embarked FROM titanic;
9:
  title: Showing Distinct Records
  text: >
    If we try to print out just author names using the Goodreads table, we get duplicates (try it!). SQL has a `distinct` keyword you can use to say "only show me unique records, not duplicates". The syntax looks like this: <span class="vocab">SELECT DISTINCT column_name FROM table_name;</span>.<br><br>It might be a little tricky to see that it is actually removing duplicates right now, but don't worry! We'll learn how to count the number of results in the next lesson. 
  examples:
    - "SELECT DISTINCT authors FROM goodreads;"
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. Too easy? Try combining previously learned skills (like aliasing or ordering) with the questions below!
  tasks:
    - question: List all of the possible fares that Titanic passengers paid.
      answer: >
        SELECT DISTINCT fare FROM titanic;<br><br>
        <span class="vocab">Spicy challenge</span>: Order the fares from highest to lowest. 
    - question: List all of the ramen brands once.
      answer: SELECT DISTINCT brand FROM ramen;
    - question: On what days of the week were tips recorded? 
      answer: SELECT DISTINCT day FROM tips;
    - question: What are the categories Google uses for their search queries? 
      answer: SELECT DISTINCT category FROM trends;
10:
  title: Counting Records
  text: >
    In the last lesson, it may have been difficult to tell if DISTINCT was actually removing duplicated records because there were so many to count! We can ask SQL to do the counting for us using the count function.<br><br>For today, there are two ways you'll see the count function used. In the first way, we count everything. This is what we'd use to count every row in a table: <span class="vocab">SELECT COUNT(*) FROM table_name;</span>. The <span class="vocab">*</span> means "every row".<br><br>Another way you'll see COUNT used is to put exactly what you want to count inside of the parentheses: <span class="vocab">SELECT COUNT(column_name) FROM table_name;</span> or <span class="vocab">SELECT COUNT(DISTINCT column_name) FROM table_name;</span>.
  examples:
    - "SELECT COUNT(*) FROM goodreads;"
    - "SELECT COUNT(authors) FROM goodreads;"
    - "SELECT COUNT(DISTINCT authors) FROM goodreads;"
  tasks:
    - question: What is the total number of records in the ramen table?
      answer: SELECT COUNT(*) FROM ramen;
    - question: How many unique ramen brands are there?
      answer: SELECT COUNT(DISTINCT brand) FROM ramen;
    - question: How many publishers had books on the Goodreads awards list?
      answer: SELECT COUNT(DISTINCT publisher) FROM goodreads;
    - question: Count the distinct survived values, distinct class values, and distinct ports from the Titanic data.
      answer: SELECT COUNT(DISTINCT survived) AS s_count, COUNT(DISTINCT pclass) AS c_count, COUNT(DISTINCT embarked) AS e_count FROM titanic;
11:
  title: Finding the Average
  text: >
    In large datasets, it's often useful to find the average of numeric data. Instead of using a calculator to add up every data point, then divide by the total number, there's a SQL function that can do that for us: <span class="vocab">SELECT AVG(column_name) FROM table_name;</span>. 
  examples:
    - "SELECT AVG(avg_rating) FROM goodreads;"
    - "SELECT AVG(votes) FROM goodreads;"
    - SELECT AVG(fare) FROM titanic;
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. Too easy? Can you alias the result name to be something other than the not-very-descriptive "avg"?
  tasks:
    - question: What is the average number of pages for the books in the goodreads table?
      answer: SELECT AVG(pages) FROM goodreads;
    - question: What was the average tip and average total bill from the tips data?
      answer: SELECT AVG(tip) AS avg_tip, AVG(total_bill) AS avg_bill FROM tips;
    - question: What is the average age of female passengers on the Titanic? What about male passengers? 
      answer: SELECT AVG(age) FROM titanic WHERE sex = 'female';
12:
  title: Categorizing Data
  text: >
    Sometimes you'll want to put data into buckets. For example, our tips table contains a timestamp (represented as an hour from 0 - 24), but how do we classify each of those timestamps as either "breakfast", "lunch", or "dinner"? We can do that using a CASE statement.<br><br><pre class="vocab"> CASE<br>
    WHEN condition1 THEN bucket1<br>
    WHEN condition2 THEN bucket2<br>
    WHEN condition3 THEN bucket3<br>
    ELSE result<br>
    END</pre>The keyword CASE kicks off the bucketing. Each of the WHEN keywords specify a condition you want to meet, and if the condition is met, which bucket to put the data in. ELSE represents what to do if none of the previous WHEN conditions were met. You can think of ELSE as "otherwise, do this".<br><br>
  examples:
    - >
      <pre> SELECT *,<br>
      CASE<br>
      WHEN time < 11 THEN "breakfast"<br>
      WHEN time < 15 THEN "lunch"<br>
      ELSE "dinner"<br>
      END AS meal<br>
      FROM tips;</pre>
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. 
  tasks:
    - question: Categorize the goodreads data by number of pages. If the book has less than 150 pages, it is "short". If if has between 151 and 350 pages, it is "medium". Anything over 350 pages is "long".
      answer: >
        <pre> SELECT *,<br>
        CASE<br>
        WHEN pages <= 150 THEN "short"<br>
        WHEN pages <= 350 THEN "medium"<br>
        ELSE "long"<br>
        END AS length<br>
        FROM goodreads;<br><br>
        <span class="vocab">Spicy challenge</span>: Display only the title, author, and length categorization.
    - question: Categorize the Titanic data by age, and call this new column "age_group". Anything under 18 should be child, anything between 19 and 64 should be adult, and anything over 65 should be elderly. Data without an age should be "unknown".
      answer: >
        <pre> SELECT *,<br>
        CASE<br>
        WHEN age < 18 THEN "child"<br>
        WHEN age < 65 THEN "adult"<br>
        WHEN age >= 65 THEN "elderly"<br>
        ELSE "unknown"<br>
        END AS age_group<br>
        FROM titanic;<br><br>
        <span class="vocab">Spicy challenge</span>: Sort your results so that the highest ages appear first.
    - question: Categorize the ramen by star rating. Anything under 2 should be "gross", anything between 2 and 4 should be "meh", and anything above 4 should be "great". 
      answer: >
        <pre> SELECT *,<br>
        CASE<br>
        WHEN stars <= 2 THEN "gross"<br>
        WHEN stars <= 4 THEN "meh"<br>
        ELSE "great"<br>
        END AS is_it_yummy<br>
        FROM ramen;<br><br>
        <span class="vocab">Spicy challenge</span>: Sort your results so that the yummy ramens appear at the top.
    - question: Categorize the tips data by size of party. 1 is considered "single", 2 is considered "couple", 3-4 is considered "group", and anything 5 or above is considered "party".
      answer: >
        <pre> SELECT *,<br>
        CASE<br>
        WHEN size = 1 THEN "single"<br>
        WHEN size = 2 THEN "couple"<br>
        WHEN size <= 4 THEN "group"<br>
        ELSE "party"<br>
        END AS party_type<br>
        FROM tips;<br><br>
        <span class="vocab">Spicy challenge</span>: Display your results so that the party_type and the size columns are next to each other.
13:
  title: Grouping Data
  text: >
    GROUP BY in SQL allows you to create a summary for data groups. For example, using the Goodreads data, we could group the data by authors, then summarize how many books that author has, the average number of pages for that author's books, etc. An example of the syntax using GROUP BY is <span class="vocab">SELECT grouped_column, count(*) FROM table_name GROUP BY grouped_column;</span><br><br>You can also use the column number instead of the name, like this: <span class="vocab">SELECT grouped_column, count(*) FROM table_name GROUP BY 1;</span><br><br>Before we move on, let's look at <a href="https://stackoverflow.com/questions/2421388/using-group-by-on-multiple-columns" target="blank">this Stackoverflow explanation</a> of what it means to group in SQL.
  examples:
    - "SELECT authors, AVG(avg_rating), COUNT(*) FROM goodreads GROUP BY authors;"
    - "SELECT query, COUNT(*) FROM trends GROUP BY 1"
  tasks:
    - question: Show the sex and number of passengers from Titanic data grouped by the sex.
      answer: >
        SELECT sex, COUNT(*) FROM titanic GROUP BY sex;<br><br><span class="vocab">Spicy challenge</span>: Add survived to your query and group by that as well, like this:<br><br>SELECT sex, survived, COUNT(*) FROM titanic GROUP BY sex, survived<br><br> What data does this query show you? How can you interpret that SQL query?
    - question: Show the number of bills for each day from the tips table.
      answer: SELECT day, COUNT(*) FROM tips GROUP BY day;
    - question: Show the average total bill and average tip group by sex.
      answer: SELECT sex, AVG(total_bill) AS total_bill_avg, AVG(tip) AS tip_avg FROM tips GROUP BY sex;
    - question: Show the average ramen rating by brand.
      answer: >
        SELECT brand, AVG(stars) AS avg_stars FROM ramen GROUP BY brand;<br><br><span class="vocab">Spicy challenge</span>: Order your results the most highly rated brand to least highly rated brand.
14:
  title: Putting It All Together
  text: >
    In breakout rooms, we'll use what we learned in the past lessons to answer questions about the titanic data.
  tasks:
    - question: Show all of the data for female Titanic passengers.
      answer: SELECT * FROM titanic WHERE sex = 'female';
    - question: Show the unique number of values for id, sex, survived, port, and fare from the Titanic dataset. Remember to alias your columns since they're all counts!
      answer: SELECT COUNT(DISTINCT id) AS count_id, COUNT(DISTINCT sex) AS count_sex, COUNT(DISTINCT survived) AS count_survived, COUNT(DISTINCT embarked) AS count_embarked, COUNT(DISTINCT fare) AS count_fare FROM titanic;
    - question: Show the counts of male and female passengers on the Titanic.
      answer: SELECT sex, COUNT(*) FROM titanic GROUP BY sex;
    - question: Show the counts of male and female passengers on the Titanic broken down by whether or not they survived.
      answer: SELECT sex, survived, COUNT(*) FROM titanic GROUP BY sex, survived;
    - question: Show all of the Titanic data with an additional column that indicates whether the person was a child, adult, elderly, or of unknown age.
      answer: > 
        SELECT *,<br>
        CASE<br>
        WHEN age < 18 THEN "child"<br>
        WHEN age < 65 THEN "adult"<br>
        WHEN age >= 65 THEN "elderly"<br>
        ELSE "unknown"<br>
        END AS age_group<br>
        FROM titanic;
