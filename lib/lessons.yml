1:
  title: What is SQL? 
  text: >
    SQL stands for <span class="vocab">Structured Query Language</span>. It's the coding language we use to parse through large sets of raw data and find answers to data questions.<br><br>You might be familar with the concept of a spreadsheet (for example, <a href="https://docs.google.com/spreadsheets/d/1R-wpkPK0cWo7Au2HdgEr4ig9kOwtPz4usXoTZqM4Z3A/edit?usp=sharing" target="blank">Google Sheets</a> or Microsoft Excel). This is one way to store data, and any ".csv" file can be opened using spreadsheet software. You can also store data in a database, which is generally the use case for SQL.<br><br>We can write SQL statements to answer questions such as:<ol><li>What books got more than 1000 votes?</li><li>What was the average rating for all books in the year 2015?</li><li>What authors have an average book rating of 4.5 or above?</li><li>Tell me the titles of all books with more than 600 pages</li></ol><br>What other questions could we answer?
  images: 
    - spreadsheet_screenshot.png
2:
  title: Exploring Datasets
  text: >
    We looked at the first 20 rows of the Goodreads Awards dataset in the screenshot of the last lesson. Let's look a little more deeply into the datasets we'll be using in this class. All of these datasets (and thousands more!) are hosted on <a href="https://www.kaggle.com">kaggle.com</a>, an online community for data analysts, data scientists, and more.<br><h4>Dataset Links</h4><a href="https://www.kaggle.com/somnambwl/book-awards" target="blank">goodreads</a><br><a href="https://www.kaggle.com/residentmario/ramen-ratings" target="blank">ramen</a><br><a href="https://www.kaggle.com/jsphyg/tipping" target="blank">tips</a><br><a href="https://www.kaggle.com/dhruvildave/google-trends-dataset" target="blank">trends</a><br><br>As you look through these datasets, ask yourself: <ol><li>What kinds of questions might I be able to answer with this data?</li><li>What trends might we find?</li><li>What might be interesting about this data?</li><li>What specific pieces of information do I get from this dataset?</li></ol><p>Type into the chat one or more answer to the above questions. For example: "By looking at the ramen dataset, we might be able find out which style of ramen has the highest average star rating.<br><br><b>NOTE:</b> In these SQL lessons, not all columns will be available. In the next lesson, you'll learn a quick trick to figure out what columns are included.
3:
  title: Select All Columns From a Dataset
  text: >
    Let's start by writing an SQL statement that will return every row and every column of a specific dataset (we'll interchangeably refer to dataset also as "table").<br><br>Assuming that a table of data exists, we can use this statement: <span class="vocab">SELECT * FROM table_name;</span><br><br>
    The <span class="vocab">*</span> represents all columns, which means you'll see all of the pieces of data for the entire dataset. It is traditional to capitalize words like SELECT and FROM, but you'll get the same result if they are lowercase (and the industry is moving away from that convention). <br><br> Let's try the example below in the console. After you finish typing, hit the ENTER key
    and your results will appear in tabular format below the console.
  examples:
    - SELECT * FROM goodreads;
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. You can click each situation to toggle the answer.  
  tasks:
    - question: Return all info from the trends table.
      answer: SELECT * FROM trends;
    - question: Return all info from the tips table.
      answer: SELECT * FROM tips;
    - question: Return all info from the ramen table.
      answer: SELECT * FROM ramen;
4:
  title: Select One Column
  text: >
    Now that you know how to select all of the data from a table, let's learn how to limit the results to
    certain columns. We can do this using the following syntax: <span class="vocab">SELECT column_name FROM
    table_name;</span> where column_name represents the one column we want to get back.
  examples:
    - SELECT location FROM trends;
    - SELECT tip FROM tips;
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. Remember, if you don't know the exact name of the column you need, you can use <b class="code">SELECT * FROM table_name</b> to see all available columns. 
  tasks:
    - question: Return only the authors of the goodreads table.
      answer: SELECT authors FROM goodreads;
    - question: Return only the titles of the goodreads table.
      answer: SELECT title FROM goodreads;
    - question: Return only the star ratings of the ramen table.
      answer: SELECT stars FROM ramen;
    - question: Return only the total bill amount from the tips table.
      answer: SELECT total_bill FROM tips;
    - question: Return only the queries from the trends table.
      answer: SELECT query FROM trends;
5:
  title: Select Multiple Columns
  text: >
    We can also select more than one column at a time. To do this, we'd use the following SQL statement:
    <span class="vocab">SELECT first_column_name, second_column_name FROM table_name;</span> where the comma
    separates each of the column names. You can create a comma-separated list of as many columns as you'd
    like to get back.
  examples:
    - "SELECT authors, title FROM goodreads;"
    - "SELECT location, year, query FROM trends;"
  task_instructions: Write SQL statements for each of the following situations and test them out in the console. Remember, if you don't know the exact name of the column you need, you can use <b class="code">SELECT * FROM table_name</b> to see all available columns. 
  tasks:
    - question: "Return the brand, country, and stars from the ramen table."
      answer: "SELECT brand, country, stars FROM ramen;"
    - question: "Return the title and category from goodreads."
      answer: "SELECT title, category FROM goodreads;"
    - question: "Return the total amount, tip, and time of day from the tips table."
      answer: "SELECT total_bill, tip, time FROM tips;"
6:
  title: Ordering Results
  text: >
    The data isn't easy to look at right now given that it's not ordered in any specific way. We can add to our SQL statement to display the data in a specific order. We can do that by appending "order by" to our query: <span class="vocab">SELECT first_column_name, second_column_name FROM table_name ORDER BY second_column_name;</span>. <br><br>Alternatively, you can order by a column number: <span class="vocab">SELECT first_column_name, second_column_name FROM table_name ORDER BY 2;</span><br><br>By default, ordering is done ascending. This means that alphabetical results will be sorted A - Z (and non-alphabet characters after that), and numerical results will be sorted starting at 0 and counting up. If you want to reverse the order, append the word <span class="vocab">DESC</span> to the end of your order by.
  examples:
    - "SELECT authors, title FROM goodreads ORDER BY authors;"
    - "SELECT authors, title FROM goodreads ORDER BY authors DESC;"
    - "SELECT location, year, query FROM trends ORDER BY 3;"
    - "SELECT location, year, query FROM trends ORDER BY 3 DESC;"
  tasks:
    - question: Show the variety, country, and stars for the ramen table and order it by highest star rating. 
      answer: SELECT variety, country, stars FROM ramen ORDER BY 3 DESC;
    - question: Show the year, rank, and query from the trends table ordered by the rank;
      answer: SELECT year, rank, query from trends ORDER BY rank;
    - question: Show the tip and total bill amount ordered by highest total bill;
      answer: SELECT tip, total_bill FROM tips ORDER BY total_bill DESC;
7:
  title: Ordering Results By Multiple Columns
  text: >
    You may have noticed that the rest of the data that is specified by the ordered column seems kind of... random. You can chnage that by adding more things to order by in your query: <span class="vocab">SELECT first_column_name, second_column_name FROM table_name ORDER BY second_column_name, first_column_name;</span>. <br><br>The order matters here. First, it will order everything by whatever appears right after "ORDER BY". Then, it will sort the results within that grouping by the second column you specify.
  examples:
    - "SELECT authors, title FROM goodreads ORDER BY authors, title;"
    - "SELECT location, year, query FROM trends ORDER BY 2 DESC, 3;"
  tasks:
    - question: Show the variety, country, and stars for the ramen table and order it by highest star rating, then variety. 
      answer: SELECT variety, country, stars FROM ramen ORDER BY 3 DESC, 1;
    - question: Show the year, rank, and query from the trends table ordered by the rank, then year;
      answer: SELECT year, rank, query from trends ORDER BY rank, year;

8:
  title: Aliasing Column Names
  text: >
    Right now, our results appear with whatever default column labels they came with (for example, "total_bill" or "query"). What if we wanted to label those "total" or "search_term" instead? We can do that with an alias: <span class="vocab">SELECT first_column_name AS my_first_title, second_column_name AS my_second_title FROM table_name;</span>. 
  examples:
    - "SELECT location, query AS search_term, year FROM trends;"
  tasks:
    - question: Print out the brand, variety, and stars for the ramen data, but change the name of "brand" to "company"
      answer: SELECT brand AS company, variety, stars from ramen;
    - question: Print out the category, title, authors, and vote count for the goodreads data, but change the name of "votes" to "total_vote_count"
      answer: SELECT category, title, authors, votes AS total_vote_count from goodreads;
